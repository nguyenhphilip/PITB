rename(x = `V1`,
y = `V2`)
correlate(d) |>
shave() |>
fashion() |>
rmarkdown::paged_table()
lm(y ~ x, data = d)
<- lm(y ~ 0 +x, data = d) |>
lm(y ~ 0 + x, data = d) |>
```
lm(y ~ x, data = d) |>
```
lm(y ~ x, data = d) |>
summary()
n <- 100000
# simulate standard normal
mu <- c(0, 0)
n <- 100000
# simulate standard normal
mu <- c(0, 0)
# Since the standard deviations of each distribution are 1
# the covariance matrix is equivalent to the correlation matrix.
sigma <- matrix(data = c(1, 0.15,
0.15, 1), nrow = 2)
d <- MASS::mvrnorm(n, mu, sigma) |>
as_tibble() |>
rename(x = `V1`,
y = `V2`)
correlate(d) |>
shave() |>
fashion() |>
rmarkdown::paged_table()
lm(y ~ x, data = d) |>
summary()
mod |>
summary() |>
tidy()
mod |>
tidy()
mod |>
broom:;tidy()
mod |>
broom::tidy()
mod |>
broom::tidy() |>
round(3)
mod |>
broom::tidy() |>
mutate(across(where(is.numeric), ~round(2)))
mod |>
broom::tidy() |>
mutate(across(where(is.numeric), ~round(3)))
mod |>
broom::tidy() |>
mutate(across(where(is.numeric), ~round(.x, 3)))
lm(y ~ x, data = d) |>
summary() >
broom::tidy() |>
mutate(across(where(is.numeric), ~round(.x, 3)))
lm(y ~ x, data = d) |>
summary() >
broom::tidy() |>
mutate(across(where(is.numeric), ~round(.x, 3)))
lm(y ~ x, data = d) |>
broom::tidy() |>
mutate(across(where(is.numeric), ~round(.x, 3)))
correlate(d) |>
shave() |>
rmarkdown::paged_table()
n <- 100
# simulate standard normal
mu <- c(0, 0)
# Since the standard deviations of each distribution are 1
# the covariance matrix is equivalent to the correlation matrix.
sigma <- matrix(data = c(1, 0.15,
0.15, 1), nrow = 2)
d <- MASS::mvrnorm(n, mu, sigma) |>
as_tibble() |>
rename(x = `V1`,
y = `V2`)
correlate(d) |>
shave() |>
rmarkdown::paged_table()
set.seed(5)
n <- 100
# simulate standard normal
mu <- c(0, 0)
# Since the standard deviations of each distribution are 1
# the covariance matrix is equivalent to the correlation matrix.
sigma <- matrix(data = c(1, 0.15,
0.15, 1), nrow = 2)
d <- MASS::mvrnorm(n, mu, sigma) |>
as_tibble() |>
rename(x = `V1`,
y = `V2`)
correlate(d) |>
shave() |>
rmarkdown::paged_table()
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
# fig.align = "center",
fig.width = 8,
fig.height = 4,
dev = "png",
cache = TRUE)
d <- vroom("~/Desktop/PhD/resilience-im-burt/resil_grouped_data.csv") |>
mutate(class = factor(class,
levels = c("competent",
"resilient",
"vulnerable",
"maladaptive")),
pds_cat = factor(pds_cat),
sex = factor(sex),
recruitment_centre = factor(recruitment_centre),
all_handedness = factor(all_handedness),
# mean center continuous covariates
pds_sum_c = center(pds_sum),
v_iq_c = center(v_iq),
p_iq_c = center(p_iq),
age_years_bsl_c = center(age_years_bsl),
# for ordered probit
across(contains("alcohol"), ~ factor(.x, ordered = T, exclude = NA)),
across(contains("mj_hash_"), ~ factor(.x, ordered = T, exclude = NA)),
across(contains("cigs_"), ~ factor(.x, ordered = T, exclude = NA)),
across(`8a_bsl`:`21_bsl`, ~ factor(.x, ordered = T, exclude = NA)),
across(`8a_fu1`:`21_fu1`, ~ factor(.x, ordered = T, exclude = NA)),
across(`8a_fu2`:`21_fu2`, ~ factor(.x, ordered = T, exclude = NA)),
across(`8a_fu3`:`21_fu3`, ~ factor(.x, ordered = T, exclude = NA)),
sex = case_when(sex == 1 ~ "Male",
sex == 2 ~ "Female"),
all_handedness = case_when(all_handedness == 0 ~ "Left",
all_handedness == 1 ~ "Right"),
# standardize sum score outcomes
audit_total_score_fu3 = standardize(audit_total_score_fu3),
cesd_c_sum_fu3 = standardize(cesd_c_sum_fu3),
dawba_sdq_c_sebdtot_fu3 = standardize(dawba_sdq_c_sebdtot_fu3),
externalizing_fu3 = standardize(externalizing_fu3),
internalizing_fu3 = standardize(internalizing_fu3),
pss_c_sum_fu3 = standardize(pss_c_sum_fu3),
rapi_c_sum_fu3 = standardize(rapi_c_sum_fu3)
)
hyp_tds <- hyp("dawba_sdq_c_sebdtot_fu3", med_tds)
num_ratings <- c(600, 738, 380, 72, 28)
ratings <- seq(1, 5)
ratings <- seq(1, 5, -1)
ratings <- seq(1, 5, by=-1)
ratings <- seq(5,1)
(ratings*num_ratings)
sum((ratings*num_ratings))/sum(num_ratings)
expand(num_ratings,ratings)
expand.grid(num_ratings,ratings)
expectation <- c(0.33 * 5, 0.40 * 4, 0.20 * 3, 0.03 *2, 0.01 * 1)
sum(expectation)
e_sum <- sum(expectation)
rep(ratings)
rep(ratings, num_ratings)
mean(rep(ratings, num_ratings))
avg <- mean(rep(ratings, num_ratings))
median <- median(rep(ratings, num_ratings))
median
mode(rep(ratings, num_ratings))
spec <- 0.999 # p(T+|HIV+)
sens <- 0.999 # p(T-|HIV-)
inf_rate <- 0.0001
spec <- 0.999 # p(T+|HIV+)
sens <- 0.999 # p(T-|HIV-)
bayes <- (spec * inf_rate)/((spec * inf_rate) + ((1-sens)*(1-inf_rate)))
bayes <- (spec * inf_rate)/((spec * inf_rate) + ((1-sens)*(1-inf_rate)))
spec <- 0.9999 # p(T+|HIV+)
sens <- 0.9999 # p(T-|HIV-)
inf_rate <- 0.0001 # p(HIV+)
bayes <- (spec * inf_rate)/((spec * inf_rate) + ((1-sens)*(1-inf_rate)))
p_inf_pos <- (spec * inf_rate)/((spec * inf_rate) + ((1-sens)*(1-inf_rate)))
p_inf_pos <- function(spec, sens, inf_rate){
bayes <- (spec * inf_rate)/((spec * inf_rate) + ((1-sens)*(1-inf_rate)))
bayes
}
p_inf_pos(spec, sens, inf_rate)
p_inf_pos(spec, sens, inf_rate)
inf_rate <- 0.100 # p(HIV+)
p_inf_pos(spec, sens, inf_rate)
people <- 10000
people*inf_rate
people*(1-inf_rate)
num_inf_true <- (people*inf_rate)
num_inf_false <- people*(1-inf_rate)
inf_rate <- 0.0001 # p(HIV+)
people <- 10000
num_inf_true <- (people*inf_rate)
num_inf_false <- people*(1-inf_rate)
num_inf_true
num_inf_false
num_inf_false * spec
num_inf_false-(num_inf_false * spec)
num_inf_false
(num_inf_false * spec)
num_inf_false - (num_inf_false * spec)
num_inf_true
fp <- num_inf_false - (num_inf_false * spec)
num_inf_true / (num_inf_true + fp)
p_hiv_pos <- num_inf_true / (num_inf_true + fp)
people <- 100000
num_inf_true <- (people*inf_rate)
num_inf_false <- people*(1-inf_rate)
fp <- num_inf_false - (num_inf_false * spec)
p_hiv_pos <- num_inf_true / (num_inf_true + fp)
p_hiv_pos
install.packages("acs")
library(acs)
library(tidyverse)
acs::summary()
acs::cpi
pre <- c(0,1,3,2,3,1,2,3,0,0,0,0,1,2,3,4)
post <- c(1,0,2,1,1,1,1,2,0,0,0,0,1,1,1,2)
t.test(post-pre)
plot(pre)
install.packages("plumber")
install.packages("jsonlite")
library(jsonlite)
read_json("https://streams.place/philintheblank/json",
simplifyVector = TRUE)
d <- read_json("https://streams.place/philintheblank/json",
simplifyVector = TRUE)
d$timestamp
d$html
d$text
d$last_edit
d$media
df <- data.frame(
text = c("Text 1", "Text 2", "Text 3"),
date = c("2022-01-01", "2022-02-01", "2022-03-01")
)
# Create a Quarto Markdown document
qmd <- quarto_md()
library(quarto)
install.packages("quarto")
library(quarto)
df <- data.frame(
text = c("Text 1", "Text 2", "Text 3"),
date = c("2022-01-01", "2022-02-01", "2022-03-01")
)
# Create a Quarto Markdown document
qmd <- quarto_md()
# Loop through each row in the data frame and add a bordered box for each row
for (i in 1:nrow(df)) {
sprintf(
"<div class='border-box'>" +
"  <h3>%s</h3>" +
"  <p>Date: %s</p>" +
"</div>",
df$text[i], df$date[i]
)
}
# Loop through each row in the data frame and add a bordered box for each row
for (i in 1:nrow(df)) {
sprintf(
"<h3>%s</h3>" + "<p>Date: %s</p>"
df$text[i], df$date[i]
# Loop through each row in the data frame and add a bordered box for each row
for (i in 1:nrow(df)) {
sprintf(
"<h3>%s</h3>", df$text[i]
)
}
df <- data.frame(
text = c("Text 1", "Text 2", "Text 3"),
date = c("2022-01-01", "2022-02-01", "2022-03-01")
)
# Loop through each row in the data frame and add a bordered box for each row
for (i in 1:nrow(df)) {
stringr::str_glue(
"{df$text[i]}"
)
}
# Loop through each row in the data frame and add a bordered box for each row
for (i in 1:nrow(df)) {
cat(stringr::str_glue(
"{df$text[i]}"
))
}
# Assuming 'df' is your data frame with text content
df <- data.frame(
text = c("Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
"Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.",
"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.")
)
# Function to wrap text in a bordered box
wrap_text_in_border <- function(text) {
paste0('<div style="border: 1px solid #ddd; padding: 10px; margin-bottom: 10px;">', text, '</div>')
}
# Apply the function to each row in the data frame
df$text <- sapply(df$text, wrap_text_in_border)
cat(paste(df$text, collapse = "\n"))
df
df$text
cat(paste(df$text, collapse = "\n"))
cat(paste(df$text, collapse = "\n"))
library(jsonlite)
# Assuming 'df' is your data frame with text content
read_json("https://streams.place/philintheblank/json", simplifyVector = T)
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T)
test
test$media
test$media[[1]]
test |> View()
install.packages("bskyr")
bskyr::bs_get_author_feed('philnguyen.bsky.social')
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T)
test
test
test |> View()
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T)
test
test$text
# Apply the function to each row in the data frame
df$text <- sapply(test$text, wrap_text_in_border)
# Apply the function to each row in the data frame
test$text <- sapply(test$text, wrap_text_in_border)
test |> View()
test$timestamp
lubridate::as_date(test$timestamp)
lubridate::as_datetime(test$timestamp)
lubridate::date(test$timestamp)
lubridate::dmy_hms(test$timestamp)
test$timestamp
lubridate::dmy_hms(as.int(test$timestamp))
lubridate::dmy_hms(as.integer(test$timestamp))
as.numeric(test$timestamp)
as.integer(test$timestamp)
test$timestamp
as.integer(test$timestamp)
integer(test$timestamp)
lubridate::dmy_hms((test$timestamp))
lubridate::dmy_hms(test$timestamp)
lubridate::dmy(test$timestamp)
lubridate::as_date(test$timestamp)
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = F)
test
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T)
test
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as.integer(timestamp))
library(tidyverse)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as.integer(timestamp))
test
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as.integer(as.character(timestamp)))
test
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as.integer(as.numeric(timestamp)))
test
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as.integer(round(as.numeric(timestamp))))
test
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T)
test
test$last_edit
test$timestamp
# Assuming 'df' is your data frame with text content
test <- tibble(read_json("https://streams.place/philintheblank/json", simplifyVector = T))
test
as.integer(test$timestamp)
test$timestamp
readr::parse_integer(test$timestamp)
ymd(readr::parse_integer(test$timestamp))
ymd_hms(readr::parse_integer(test$timestamp))
readr::parse_character(test$timestamp)
as.integer(readr::parse_character(test$timestamp))
ymd(readr::parse_date(test$timestamp))
ymd(readr::parse_datetime(test$timestamp))
readr::parse_date(readr::parse_integer(test$timestamp))
readr::parse_integer(test$timestamp)
readr::parse_date(readr::parse_integer(test$timestamp))
readr::parse_character(readr::parse_integer(test$timestamp))
as.Date(as.character(test$timestamp),format = "%Y%m%d")
as.Date(test$timestamp,format = "%Y%m%d")
as.POSIXct(test$timestamp)
as.POSIXct(test$timestamp)
as.POSIXct(test$timestamp, origin = "1970-01-01")
as.POSIXct(as.numeric(test$timestamp), origin = "1970-01-01")
as.POSIXct(as.numeric(test$timestamp))
test$timestamp
as_datetime(test$timestamp)
as_datetime(as.numeric(test$timestamp))
as_datetime(as.integer(as.numeric(test$timestamp)))
as.numeric(test$timestamp)
round(as.numeric(test$timestamp))
round(as.numeric(test$timestamp)))
as_datetime(as.integer(round(as.numeric(test$timestamp))))
as_datetime(test$timestamp)
as_datetime(as.numeric(test$timestamp))
as_date(as_datetime(as.numeric(test$timestamp)))
ymd_hms("1705176475000")
ymd("1705176475000")
ymd(1705176475000)
strptime(1705176475000)
strptime(1705176475000, "%Y%m%d%H%M%S")
strptime("1705176475000", "%Y%m%d%H%M%S")
as.POSIXct(as.numeric(test$timestamp))
char_value <- "1705176475000"
# Convert milliseconds to seconds
seconds_value <- as.numeric(char_value) / 1000
seconds_value
# Convert to POSIXct (date and time) format
date_time <- as.POSIXct(seconds_value, origin = "1970-01-01", tz = "UTC")
# Convert to your desired time zone
formatted_date <- format(date_time, "%Y-%m-%d %H:%M:%S", tz = "America/New_York")
print(formatted_date)
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as.numeric(timestamp)/1000)
test$timestamp
as_date(as_datetime(test$timestamp))
as_datetime(test$timestamp)
as_datetime(test$timestamp, tz = "EST")
# Convert to POSIXct (date and time) format
date_time <- as.POSIXct(seconds_value, origin = "1970-01-01", tz = tz = "America/New_York")
as_datetime(test$timestamp, tz = "America/New_York")
as_datetime(test$timestamp, tz = "Standard")
as_datetime(test$timestamp, tz = "STD")
as_datetime(test$timestamp, tz = "UTC")
ymd_hms(as_datetime(test$timestamp, tz = "UTC"), "America/New_York")
as_datetime(test$timestamp)
ymd_hms(as_datetime(test$timestamp), "America/New_York")
ymd_hms(test$timestamp)
ymd_hms(as_datetime(test$timestamp))
as_datetime(test$timestamp)
with_tz(as_datetime(test$timestamp))
format(with_tz(as_datetime(test$timestamp)), "%I:%M:%S")
format(with_tz(as_datetime(test$timestamp)), "$Y:$M:$d:%I:%M:%S")
as_datetime(test$timestamp))
as_datetime(test$timestamp)
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as_datetime(as.numeric(timestamp)/1000))
test$timestamp
ymd(test$timestamp)
ymd_hms(test$timestamp)
year(ymd_hms(test$timestamp))
month(ymd_hms(test$timestamp))
hour(ymd_hms(test$timestamp))
as_date(test$timestamp)
hm(test$timestamp)
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as_datetime(as.numeric(timestamp)/1000),
date = as_date(timestamp),
hour = hour(timestamp),
minute = minute(timestamp)
)
test
test$timestamp
str_split(test$timestamp)
str_split(test$timestamp, " ")
str_split(test$timestamp, " ")[[2]]
str_split(test$timestamp)
test$timestamp
str_split(test$timestamp, pattern = " ")
str_split_1(test$timestamp, pattern = " ")
test$timestamp
str_extract(test$timestamp, pattern = "\\d{2}:\\d{2}")
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as_datetime(as.numeric(timestamp)/1000),
date = as_date(timestamp),
hour_min = str_extract(test$timestamp, pattern = "\\d{2}:\\d{2}")
)
test$hour_min
test$date
test
test
test|> View()
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as_datetime(as.numeric(timestamp)/1000),
date = as_date(timestamp),
hour_min = str_extract(test$timestamp, pattern = "\\d{2}:\\d{2}")
)
library(jsonlite)
library(tidyverse)
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as_datetime(as.numeric(timestamp)/1000),
date = as_date(timestamp),
hour_min = str_extract(test$timestamp, pattern = "\\d{2}:\\d{2}")
)
library(jsonlite)
library(tidyverse)
# Assuming 'df' is your data frame with text content
test <- read_json("https://streams.place/philintheblank/json", simplifyVector = T) |>
mutate(timestamp = as_datetime(as.numeric(timestamp)/1000),
date = as_date(timestamp),
hour_min = str_extract(test$timestamp, pattern = "\\d{2}:\\d{2}")
)
read_json("https://streams.place/philintheblank/json", simplifyVector = T)
